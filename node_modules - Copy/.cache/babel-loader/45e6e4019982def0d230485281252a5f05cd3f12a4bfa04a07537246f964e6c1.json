{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useTheme } from \"@mui/material\";\nimport { ResponsiveChoropleth } from \"@nivo/geo\";\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\nimport { tokens } from \"../theme\";\nimport { mockGeographyData as data } from \"../data/mockData\";\nconst GeographyChart = ({\n  isDashboard = false\n}) => {\n  _s();\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  //   return (\n  //     <ResponsiveChoropleth\n  //       data={data}\n  //       theme={{\n  //         axis: {\n  //           domain: {\n  //             line: {\n  //               stroke: colors.grey[100],\n  //             },\n  //           },\n  //           legend: {\n  //             text: {\n  //               fill: colors.grey[100],\n  //             },\n  //           },\n  //           ticks: {\n  //             line: {\n  //               stroke: colors.grey[100],\n  //               strokeWidth: 1,\n  //             },\n  //             text: {\n  //               fill: colors.grey[100],\n  //             },\n  //           },\n  //         },\n  //         legends: {\n  //           text: {\n  //             fill: colors.grey[100],\n  //           },\n  //         },\n  //       }}\n  //       features={geoFeatures.features}\n  //       margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n  //       domain={[0, 1000000]}\n  //       unknownColor=\"#666666\"\n  //       label=\"properties.name\"\n  //       valueFormat=\".2s\"\n  //       projectionScale={isDashboard ? 40 : 150}\n  //       projectionTranslation={isDashboard ? [0.49, 0.6] : [0.5, 0.5]}\n  //       projectionRotation={[0, 0, 0]}\n  //       borderWidth={1.5}\n  //       borderColor=\"#ffffff\"\n  //       legends={\n  //         !isDashboard\n  //           ? [\n  //               {\n  //                 anchor: \"bottom-left\",\n  //                 direction: \"column\",\n  //                 justify: true,\n  //                 translateX: 20,\n  //                 translateY: -100,\n  //                 itemsSpacing: 0,\n  //                 itemWidth: 94,\n  //                 itemHeight: 18,\n  //                 itemDirection: \"left-to-right\",\n  //                 itemTextColor: colors.grey[100],\n  //                 itemOpacity: 0.85,\n  //                 symbolSize: 18,\n  //                 effects: [\n  //                   {\n  //                     on: \"hover\",\n  //                     style: {\n  //                       itemTextColor: \"#ffffff\",\n  //                       itemOpacity: 1,\n  //                     },\n  //                   },\n  //                 ],\n  //               },\n  //             ]\n  //           : undefined\n  //       }\n  //     />\n  //   );\n};\n_s(GeographyChart, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = GeographyChart;\nexport default GeographyChart;\nvar _c;\n$RefreshReg$(_c, \"GeographyChart\");","map":{"version":3,"names":["useTheme","ResponsiveChoropleth","geoFeatures","tokens","mockGeographyData","data","GeographyChart","isDashboard","_s","theme","colors","palette","mode","_c","$RefreshReg$"],"sources":["D:/PROJECTS/react-admin/src/components/GeographyChart.jsx"],"sourcesContent":["\r\nimport { useTheme } from \"@mui/material\";\r\nimport { ResponsiveChoropleth } from \"@nivo/geo\";\r\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\r\nimport { tokens } from \"../theme\";\r\nimport { mockGeographyData as data } from \"../data/mockData\";\r\n\r\nconst GeographyChart = ({ isDashboard = false }) => {\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n//   return (\r\n//     <ResponsiveChoropleth\r\n//       data={data}\r\n//       theme={{\r\n//         axis: {\r\n//           domain: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//           ticks: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//               strokeWidth: 1,\r\n//             },\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//         },\r\n//         legends: {\r\n//           text: {\r\n//             fill: colors.grey[100],\r\n//           },\r\n//         },\r\n//       }}\r\n//       features={geoFeatures.features}\r\n//       margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n//       domain={[0, 1000000]}\r\n//       unknownColor=\"#666666\"\r\n//       label=\"properties.name\"\r\n//       valueFormat=\".2s\"\r\n//       projectionScale={isDashboard ? 40 : 150}\r\n//       projectionTranslation={isDashboard ? [0.49, 0.6] : [0.5, 0.5]}\r\n//       projectionRotation={[0, 0, 0]}\r\n//       borderWidth={1.5}\r\n//       borderColor=\"#ffffff\"\r\n//       legends={\r\n//         !isDashboard\r\n//           ? [\r\n//               {\r\n//                 anchor: \"bottom-left\",\r\n//                 direction: \"column\",\r\n//                 justify: true,\r\n//                 translateX: 20,\r\n//                 translateY: -100,\r\n//                 itemsSpacing: 0,\r\n//                 itemWidth: 94,\r\n//                 itemHeight: 18,\r\n//                 itemDirection: \"left-to-right\",\r\n//                 itemTextColor: colors.grey[100],\r\n//                 itemOpacity: 0.85,\r\n//                 symbolSize: 18,\r\n//                 effects: [\r\n//                   {\r\n//                     on: \"hover\",\r\n//                     style: {\r\n//                       itemTextColor: \"#ffffff\",\r\n//                       itemOpacity: 1,\r\n//                     },\r\n//                   },\r\n//                 ],\r\n//               },\r\n//             ]\r\n//           : undefined\r\n//       }\r\n//     />\r\n//   );\r\n};\r\n\r\n\r\nexport default GeographyChart;\r\n"],"mappings":";AACA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,iBAAiB,IAAIC,IAAI,QAAQ,kBAAkB;AAE5D,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxB,MAAMU,MAAM,GAAGP,MAAM,CAACM,KAAK,CAACE,OAAO,CAACC,IAAI,CAAC;EAC3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC;AAACJ,EAAA,CA5EIF,cAAc;EAAA,QACJN,QAAQ;AAAA;AAAAa,EAAA,GADlBP,cAAc;AA+EpB,eAAeA,cAAc;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}